datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "./node_modules/.prisma/client"
}

model User {
    id           String @id
    username     String
    accessToken  String
    refreshToken String
    time         BigInt

    email       String?
    avatar      String?
    bumpCounter Int?

    tokens UserToken[]
}

model UserToken {
    userId String
    token  String @id

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friend {
    userId      String   @id
    username    String
    description String
    nsfw        Boolean
    time        DateTime
    tags        String[]
}

model Guild {
    guildId String @id

    name   String
    invite String
    icon   String?
    banner String?

    category    String
    description String

    nsfw     Boolean?
    bumpTime DateTime?

    tags String[]

    reviews  GuildReview[]
    settings GuildSetting[]
    infos    GuildInfo[]
    datas    GuildData[]
}

model GuildReview {
    userId  String
    guildId String
    star    Int
    content String?

    guild Guild @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

    @@id([userId, guildId])
}

model GuildData {
    guildId String
    date    DateTime

    vcMembers   String[]
    newMembers  Int?
    newMessages Int?
    vcUpperTwo  Int?

    guild Guild @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

    @@id([guildId, date])
}

model GuildInfo {
    guildId String @id

    levelRank BigInt?
    rateRank  BigInt?
    rateMax   BigInt?

    removed     DateTime?
    bumpCounter Int?
    activeRate  BigInt?

    level BigInt?
    point BigInt?

    guild Guild @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model GuildSetting {
    guildId           String   @id
    actingOwner       String?
    bumpNotice        Boolean?
    bumpNoticeRole    String?
    bumpNoticeContent String?
    dpNoticeChannel   String?
    dpBanBasis        Int?

    guild Guild @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model GuildTmp {
    guildId String @id

    name   String
    invite String
    icon   String?
    banner String?
}

//パネル用
model Panel {
    guildId   String
    type      String
    channelId String
    messageId String

    @@id([guildId, type])
}

//ブラックリスト達
model BlackList {
    userId      String @id
    description String
}

model GuildBlackList {
    guildId String @id
}